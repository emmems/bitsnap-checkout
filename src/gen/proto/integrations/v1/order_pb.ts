// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file integrations/v1/order.proto (package integrations.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Environment } from "../../common/v1/environment_pb.js";
import { Gateway } from "../../common/v1/gateway_pb.js";

/**
 * @generated from enum integrations.v1.OrderStatus
 */
export enum OrderStatus {
  /**
   * @generated from enum value: CREATED = 0;
   */
  CREATED = 0,

  /**
   * @generated from enum value: PAID = 1;
   */
  PAID = 1,

  /**
   * @generated from enum value: UNPAID = 2;
   */
  UNPAID = 2,

  /**
   * @generated from enum value: CANCELED = 3;
   */
  CANCELED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(OrderStatus)
proto3.util.setEnumType(OrderStatus, "integrations.v1.OrderStatus", [
  { no: 0, name: "CREATED" },
  { no: 1, name: "PAID" },
  { no: 2, name: "UNPAID" },
  { no: 3, name: "CANCELED" },
]);

/**
 * @generated from enum integrations.v1.BillingPeriod
 */
export enum BillingPeriod {
  /**
   * @generated from enum value: DAILY = 0;
   */
  DAILY = 0,

  /**
   * @generated from enum value: WEEKLY = 1;
   */
  WEEKLY = 1,

  /**
   * @generated from enum value: MONTHLY = 2;
   */
  MONTHLY = 2,

  /**
   * @generated from enum value: QUARTERLY = 3;
   */
  QUARTERLY = 3,

  /**
   * @generated from enum value: SEMI_ANNUALLY = 4;
   */
  SEMI_ANNUALLY = 4,

  /**
   * @generated from enum value: ANNUALLY = 5;
   */
  ANNUALLY = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(BillingPeriod)
proto3.util.setEnumType(BillingPeriod, "integrations.v1.BillingPeriod", [
  { no: 0, name: "DAILY" },
  { no: 1, name: "WEEKLY" },
  { no: 2, name: "MONTHLY" },
  { no: 3, name: "QUARTERLY" },
  { no: 4, name: "SEMI_ANNUALLY" },
  { no: 5, name: "ANNUALLY" },
]);

/**
 * @generated from message integrations.v1.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: integrations.v1.OrderStatus status = 2;
   */
  status = OrderStatus.CREATED;

  /**
   * @generated from field: common.v1.Environment environment = 3;
   */
  environment = Environment.PRODUCTION;

  /**
   * @generated from field: repeated integrations.v1.OrderItem items = 4;
   */
  items: OrderItem[] = [];

  /**
   * @generated from field: repeated string available_countries = 5;
   */
  availableCountries: string[] = [];

  /**
   * @generated from field: optional integrations.v1.BillingAddress billing_address = 6;
   */
  billingAddress?: BillingAddress;

  /**
   * @generated from field: optional integrations.v1.Address shipping_address = 7;
   */
  shippingAddress?: Address;

  /**
   * @generated from field: optional integrations.v1.OrderDetails details = 8;
   */
  details?: OrderDetails;

  /**
   * @generated from field: optional integrations.v1.Customer customer = 9;
   */
  customer?: Customer;

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(OrderStatus) },
    { no: 3, name: "environment", kind: "enum", T: proto3.getEnumType(Environment) },
    { no: 4, name: "items", kind: "message", T: OrderItem, repeated: true },
    { no: 5, name: "available_countries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "billing_address", kind: "message", T: BillingAddress, opt: true },
    { no: 7, name: "shipping_address", kind: "message", T: Address, opt: true },
    { no: 8, name: "details", kind: "message", T: OrderDetails, opt: true },
    { no: 9, name: "customer", kind: "message", T: Customer, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * @generated from message integrations.v1.OrderDetails
 */
export class OrderDetails extends Message<OrderDetails> {
  /**
   * @generated from field: common.v1.Gateway gateway = 1;
   */
  gateway = Gateway.ALL;

  /**
   * @generated from field: repeated integrations.v1.DeliveryMethod delivery_methods = 2;
   */
  deliveryMethods: DeliveryMethod[] = [];

  /**
   * @generated from field: optional int64 delivery_method_price = 3;
   */
  deliveryMethodPrice?: bigint;

  /**
   * @generated from field: optional string delivery_method = 4;
   */
  deliveryMethod?: string;

  /**
   * @generated from field: bool ask_for_phone = 6;
   */
  askForPhone = false;

  /**
   * @generated from field: bool ask_for_note = 7;
   */
  askForNote = false;

  /**
   * @generated from field: bool ask_for_nip = 8;
   */
  askForNip = false;

  /**
   * @generated from field: optional string coupon_code = 9;
   */
  couponCode?: string;

  /**
   * @generated from field: optional int64 coupon_discount_amount = 10;
   */
  couponDiscountAmount?: bigint;

  /**
   * @generated from field: optional string coupon_discount_currency = 11;
   */
  couponDiscountCurrency?: string;

  /**
   * @generated from field: optional string coupon_discount_type = 12;
   */
  couponDiscountType?: string;

  /**
   * @generated from field: optional bool coupon_includes_delivery = 13;
   */
  couponIncludesDelivery?: boolean;

  /**
   * @generated from field: optional string success_url = 14;
   */
  successUrl?: string;

  /**
   * @generated from field: optional string cancel_url = 15;
   */
  cancelUrl?: string;

  /**
   * @generated from field: optional string payment_gateway_id = 16;
   */
  paymentGatewayId?: string;

  /**
   * @generated from field: map<string, string> metadata = 17;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: repeated integrations.v1.CheckoutAgreement additional_agreements = 18;
   */
  additionalAgreements: CheckoutAgreement[] = [];

  constructor(data?: PartialMessage<OrderDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.OrderDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gateway", kind: "enum", T: proto3.getEnumType(Gateway) },
    { no: 2, name: "delivery_methods", kind: "message", T: DeliveryMethod, repeated: true },
    { no: 3, name: "delivery_method_price", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 4, name: "delivery_method", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "ask_for_phone", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "ask_for_note", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "ask_for_nip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "coupon_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "coupon_discount_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 11, name: "coupon_discount_currency", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "coupon_discount_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "coupon_includes_delivery", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "success_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "cancel_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "payment_gateway_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 18, name: "additional_agreements", kind: "message", T: CheckoutAgreement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderDetails {
    return new OrderDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderDetails {
    return new OrderDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderDetails {
    return new OrderDetails().fromJsonString(jsonString, options);
  }

  static equals(a: OrderDetails | PlainMessage<OrderDetails> | undefined, b: OrderDetails | PlainMessage<OrderDetails> | undefined): boolean {
    return proto3.util.equals(OrderDetails, a, b);
  }
}

/**
 * @generated from message integrations.v1.CheckoutAgreement
 */
export class CheckoutAgreement extends Message<CheckoutAgreement> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: bool required = 4;
   */
  required = false;

  /**
   * @generated from field: optional bool answer = 5;
   */
  answer?: boolean;

  constructor(data?: PartialMessage<CheckoutAgreement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.CheckoutAgreement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "answer", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckoutAgreement {
    return new CheckoutAgreement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckoutAgreement {
    return new CheckoutAgreement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckoutAgreement {
    return new CheckoutAgreement().fromJsonString(jsonString, options);
  }

  static equals(a: CheckoutAgreement | PlainMessage<CheckoutAgreement> | undefined, b: CheckoutAgreement | PlainMessage<CheckoutAgreement> | undefined): boolean {
    return proto3.util.equals(CheckoutAgreement, a, b);
  }
}

/**
 * @generated from message integrations.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from oneof integrations.v1.Metadata.value
   */
  value: {
    /**
     * @generated from field: string string_value = 2;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bool boolean_value = 3;
     */
    value: boolean;
    case: "booleanValue";
  } | {
    /**
     * @generated from field: int64 number_value = 4;
     */
    value: bigint;
    case: "numberValue";
  } | {
    /**
     * @generated from field: string select_value = 5;
     */
    value: string;
    case: "selectValue";
  } | {
    /**
     * @generated from field: integrations.v1.Metadata.ArrayValue array_value = 6;
     */
    value: Metadata_ArrayValue;
    case: "arrayValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 3, name: "boolean_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 4, name: "number_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 5, name: "select_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 6, name: "array_value", kind: "message", T: Metadata_ArrayValue, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message integrations.v1.Metadata.ArrayValue
 */
export class Metadata_ArrayValue extends Message<Metadata_ArrayValue> {
  /**
   * @generated from field: repeated integrations.v1.Metadata.ArrayValue.Element elements = 1;
   */
  elements: Metadata_ArrayValue_Element[] = [];

  constructor(data?: PartialMessage<Metadata_ArrayValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Metadata.ArrayValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "elements", kind: "message", T: Metadata_ArrayValue_Element, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata_ArrayValue {
    return new Metadata_ArrayValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata_ArrayValue {
    return new Metadata_ArrayValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata_ArrayValue {
    return new Metadata_ArrayValue().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata_ArrayValue | PlainMessage<Metadata_ArrayValue> | undefined, b: Metadata_ArrayValue | PlainMessage<Metadata_ArrayValue> | undefined): boolean {
    return proto3.util.equals(Metadata_ArrayValue, a, b);
  }
}

/**
 * @generated from message integrations.v1.Metadata.ArrayValue.Element
 */
export class Metadata_ArrayValue_Element extends Message<Metadata_ArrayValue_Element> {
  /**
   * @generated from oneof integrations.v1.Metadata.ArrayValue.Element.value
   */
  value: {
    /**
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bool boolean_value = 2;
     */
    value: boolean;
    case: "booleanValue";
  } | {
    /**
     * @generated from field: float float_value = 3;
     */
    value: number;
    case: "floatValue";
  } | {
    /**
     * @generated from field: int64 number_value = 4;
     */
    value: bigint;
    case: "numberValue";
  } | {
    /**
     * json
     *
     * @generated from field: bytes object_value = 5;
     */
    value: Uint8Array;
    case: "objectValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Metadata_ArrayValue_Element>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Metadata.ArrayValue.Element";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "boolean_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 3, name: "float_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "value" },
    { no: 4, name: "number_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 5, name: "object_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata_ArrayValue_Element {
    return new Metadata_ArrayValue_Element().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata_ArrayValue_Element {
    return new Metadata_ArrayValue_Element().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata_ArrayValue_Element {
    return new Metadata_ArrayValue_Element().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata_ArrayValue_Element | PlainMessage<Metadata_ArrayValue_Element> | undefined, b: Metadata_ArrayValue_Element | PlainMessage<Metadata_ArrayValue_Element> | undefined): boolean {
    return proto3.util.equals(Metadata_ArrayValue_Element, a, b);
  }
}

/**
 * @generated from message integrations.v1.Address
 */
export class Address extends Message<Address> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string line1 = 2;
   */
  line1 = "";

  /**
   * @generated from field: optional string line2 = 3;
   */
  line2?: string;

  /**
   * @generated from field: string city = 4;
   */
  city = "";

  /**
   * @generated from field: string country = 5;
   */
  country = "";

  /**
   * @generated from field: optional string zip_code = 6;
   */
  zipCode?: string;

  constructor(data?: PartialMessage<Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "line2", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Address {
    return new Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJsonString(jsonString, options);
  }

  static equals(a: Address | PlainMessage<Address> | undefined, b: Address | PlainMessage<Address> | undefined): boolean {
    return proto3.util.equals(Address, a, b);
  }
}

/**
 * @generated from message integrations.v1.BillingAddress
 */
export class BillingAddress extends Message<BillingAddress> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string line1 = 2;
   */
  line1 = "";

  /**
   * @generated from field: optional string line2 = 3;
   */
  line2?: string;

  /**
   * @generated from field: string city = 4;
   */
  city = "";

  /**
   * @generated from field: string country = 5;
   */
  country = "";

  /**
   * @generated from field: optional string zip_code = 6;
   */
  zipCode?: string;

  /**
   * @generated from field: optional string tax_id = 7;
   */
  taxId?: string;

  constructor(data?: PartialMessage<BillingAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.BillingAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "line2", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "tax_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingAddress {
    return new BillingAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingAddress {
    return new BillingAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingAddress {
    return new BillingAddress().fromJsonString(jsonString, options);
  }

  static equals(a: BillingAddress | PlainMessage<BillingAddress> | undefined, b: BillingAddress | PlainMessage<BillingAddress> | undefined): boolean {
    return proto3.util.equals(BillingAddress, a, b);
  }
}

/**
 * @generated from message integrations.v1.OrderItem
 */
export class OrderItem extends Message<OrderItem> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: int64 price = 3;
   */
  price = protoInt64.zero;

  /**
   * @generated from field: string currency = 4;
   */
  currency = "";

  /**
   * @generated from field: optional int32 tax = 5;
   */
  tax?: number;

  /**
   * @generated from field: optional string name = 6;
   */
  name?: string;

  /**
   * @generated from field: optional integrations.v1.Recurring recurring = 7;
   */
  recurring?: Recurring;

  constructor(data?: PartialMessage<OrderItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.OrderItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tax", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "recurring", kind: "message", T: Recurring, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderItem {
    return new OrderItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJsonString(jsonString, options);
  }

  static equals(a: OrderItem | PlainMessage<OrderItem> | undefined, b: OrderItem | PlainMessage<OrderItem> | undefined): boolean {
    return proto3.util.equals(OrderItem, a, b);
  }
}

/**
 * @generated from message integrations.v1.Customer
 */
export class Customer extends Message<Customer> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: optional string phone = 2;
   */
  phone?: string;

  /**
   * @generated from field: optional string name = 3;
   */
  name?: string;

  constructor(data?: PartialMessage<Customer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Customer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Customer {
    return new Customer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Customer {
    return new Customer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Customer {
    return new Customer().fromJsonString(jsonString, options);
  }

  static equals(a: Customer | PlainMessage<Customer> | undefined, b: Customer | PlainMessage<Customer> | undefined): boolean {
    return proto3.util.equals(Customer, a, b);
  }
}

/**
 * @generated from message integrations.v1.DeliveryMethod
 */
export class DeliveryMethod extends Message<DeliveryMethod> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 min = 2;
   */
  min = 0;

  /**
   * @generated from field: int32 max = 3;
   */
  max = 0;

  /**
   * @generated from field: int64 price = 4;
   */
  price = protoInt64.zero;

  constructor(data?: PartialMessage<DeliveryMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.DeliveryMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeliveryMethod {
    return new DeliveryMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeliveryMethod {
    return new DeliveryMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeliveryMethod {
    return new DeliveryMethod().fromJsonString(jsonString, options);
  }

  static equals(a: DeliveryMethod | PlainMessage<DeliveryMethod> | undefined, b: DeliveryMethod | PlainMessage<DeliveryMethod> | undefined): boolean {
    return proto3.util.equals(DeliveryMethod, a, b);
  }
}

/**
 * @generated from message integrations.v1.Recurring
 */
export class Recurring extends Message<Recurring> {
  /**
   * @generated from field: integrations.v1.BillingPeriod billing_period = 1;
   */
  billingPeriod = BillingPeriod.DAILY;

  /**
   * @generated from field: optional int32 trial_days = 2;
   */
  trialDays?: number;

  /**
   * @generated from field: optional int32 number_of_payments = 3;
   */
  numberOfPayments?: number;

  constructor(data?: PartialMessage<Recurring>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integrations.v1.Recurring";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "billing_period", kind: "enum", T: proto3.getEnumType(BillingPeriod) },
    { no: 2, name: "trial_days", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "number_of_payments", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Recurring {
    return new Recurring().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Recurring {
    return new Recurring().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Recurring {
    return new Recurring().fromJsonString(jsonString, options);
  }

  static equals(a: Recurring | PlainMessage<Recurring> | undefined, b: Recurring | PlainMessage<Recurring> | undefined): boolean {
    return proto3.util.equals(Recurring, a, b);
  }
}

